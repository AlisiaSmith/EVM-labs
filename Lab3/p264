	.file	"source.c"
	.text
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC3:
	.string	"%Lf \n"
	.section	.text.startup,"ax",@progbits
	.p2align 4,,15
	.globl	main
	.type	main, @function
main:
.LFB41:
	.cfi_startproc
	subq	$24, %rsp							; Вычесть из значения в регистра rsp 24
	.cfi_def_cfa_offset 32
	movq	8(%rsi), %rdi					;	Поместить в регистр rdi значение из памяти rsi + 8
	movl	$10, %edx							; Присвоить edx 10
	xorl	%esi, %esi						; Побитовое исключающее ИЛИ, то же, что и movl $0 %esi
	call	strtol@PLT						; Вызов подпрограммы strol
	movsd	.LC1(%rip), %xmm2			; Поместить в xmm2 значение по указаному адресу
	fldz												; Загрузить в стек ноль
	movsd	.LC2(%rip), %xmm3			; Поместить в xmm3 значение по указаному адресу
	xorl	%ecx, %ecx						; Побитовое исключающее ИЛИ, то же, что и movl $0 %ecx
	.p2align 4,,10
	.p2align 3
.L5:
	testb	$1, %cl								; Логическое И между всеми битами двух операндов (устанавливает флаги)
	movapd	%xmm3, %xmm1				; Перемещение упакованных выровненных Double
	jne	.L2											; Еси флаг = 0 перейти к .L2
	movapd	%xmm2, %xmm1				; Перемещение упакованных выровненных Double
.L2:
	pxor	%xmm0, %xmm0					; Логическое ИСКЛЮЧАЮЩЕЕ ИЛИ над 64 битами, movl $0 %xmm0
	movl	%ecx, %edx						; Присвоить регистру edx значение из ecx
	addl	$1, %ecx							; Добавить к ecx 1
	cmpl	%ecx, %eax						; Сравнить значения в регистрах
	cvtsi2ssq	%rdx, %xmm0				; Преобразование типа переменной
	cvtss2sd	%xmm0, %xmm0			; Преобразование типа переменной
	addsd	%xmm0, %xmm0					; Увеличиваем значение в регистре xmm0 в два раза
	addsd	%xmm2, %xmm0					; Прибавляем к значению в регистре xmm0 значение из xmm2
	divsd	%xmm0, %xmm1					; Делим содержимое регистра xmm0 на значение из xmm1
	movsd	%xmm1, 8(%rsp)				; Перемещаем значение из регистра xmm3 в rsp + 8
	faddl	8(%rsp)								; Прибавить к значению на верхушке стека значение из rsp + 8
	jnb	.L5											; Команда "переход, если бит не установлен" выполняет вествление по адресу, если указанный бит равен "нулю"
	fmuls	.LC4(%rip)						; Умножаем значение на верхушке стека на значение по адресу
	leaq	.LC3(%rip), %rsi			; Загрузить адрес в регистр rsi
	subq	$16, %rsp							; Вычетаем 16 из rsp
	.cfi_def_cfa_offset 48
	movl	$1, %edi							; Поместить в регистр edi единицу
	xorl	%eax, %eax						; Побитовое исключающее ИЛИ, то же, что и movl $0 %eax
	fstpt	(%rsp)								; Выталкиваем значение из вершины стека в память по адресу rsp
	call	__printf_chk@PLT			; Вызов подпрограммы __printf_chk
	xorl	%eax, %eax						; Побитовое исключающее ИЛИ, то же, что и movl $0 %eax
	addq	$40, %rsp							; Прибавить к rsp 40
	.cfi_def_cfa_offset 8
	ret													; Выход из подпрограммы
	.cfi_endproc
.LFE41:
	.size	main, .-main
	.section	.rodata.cst8,"aM",@progbits,8
	.align 8
.LC1:
	.long	0
	.long	1072693248
	.align 8
.LC2:
	.long	0
	.long	-1074790400
	.section	.rodata.cst4,"aM",@progbits,4
	.align 4
.LC4:
	.long	1082130432
	.ident	"GCC: (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0"
	.section	.note.GNU-stack,"",@progbits
